{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://edh-www.adw.uni-heidelberg.de/inschrift/erweiterteSuche?hd_nr=&tm_nr=&beleg=c&land=&fo_antik=&fo_modern=&fundstelle=&region=&compFundjahr=eq&fundjahr=&aufbewahrung=&inschriftgattung=&sprache=L&inschrifttraeger=&compHoehe=eq&hoehe=&compBreite=eq&breite=&compTiefe=eq&tiefe=&bh=&palSchreibtechnik=&dat_tag=&dat_monat=&dat_jahr_a=&dat_jahr_e=&hist_periode=&religion=&literatur=&kommentar=&p_name=&p_praenomen=&p_nomen=&p_cognomen=&p_supernomen=&p_tribus=&p_origo=&p_geschlecht=&p_status=&compJahre=eq&p_lJahre=&compMonate=eq&p_lMonate=&compTage=eq&p_lTage=&compStunden=eq&p_lStunden=&atext1=&bool=AND&atext2=&beleg89=ja&nurMitFoto=ja&sort=hd_nr&anzahl=100&addFeldMaterial=ja&addFeldDTyp=ja&addFeldIGat=ja&start=0\n"
     ]
    }
   ],
   "source": [
    "#load needed libraries\n",
    "import urllib.request\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "import pandas as pd\n",
    "\n",
    "# Create query variables\n",
    "# base url string of site\n",
    "urlBase = \"https://edh-www.adw.uni-heidelberg.de\"\n",
    "# query parameters for the url, page size set to 100\n",
    "urlQueryBase = \"/inschrift/erweiterteSuche?hd_nr=&tm_nr=&beleg=c&land=&fo_antik=&fo_modern=&fundstelle=&region=&compFundjahr=eq&fundjahr=&aufbewahrung=&inschriftgattung=&sprache=L&inschrifttraeger=&compHoehe=eq&hoehe=&compBreite=eq&breite=&compTiefe=eq&tiefe=&bh=&palSchreibtechnik=&dat_tag=&dat_monat=&dat_jahr_a=&dat_jahr_e=&hist_periode=&religion=&literatur=&kommentar=&p_name=&p_praenomen=&p_nomen=&p_cognomen=&p_supernomen=&p_tribus=&p_origo=&p_geschlecht=&p_status=&compJahre=eq&p_lJahre=&compMonate=eq&p_lMonate=&compTage=eq&p_lTage=&compStunden=eq&p_lStunden=&atext1=&bool=AND&atext2=&beleg89=ja&nurMitFoto=ja&sort=hd_nr&anzahl=100&addFeldMaterial=ja&addFeldDTyp=ja&addFeldIGat=ja&start=\"\n",
    "# offset of the query\n",
    "offset = 0\n",
    "# parameter to specify language as english\n",
    "paramLang = \"&lang=en\"\n",
    "\n",
    "#create query\n",
    "url = urlBase + urlQueryBase + str(offset)\n",
    "print(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Load query results page\n",
    "f = urllib.request.urlopen(url)\n",
    "htmlDocString = f.read() \n",
    "f.close()\n",
    "# take a quick look at the html\n",
    "#print(htmlDocString)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<table class=\"treffertabelle\">\n",
      " <thead>\n",
      "  <tr>\n",
      "   <th colspan=\"3\" id=\"zwischenueberschrift\">\n",
      "    Number 3:\n",
      "    <a class=\"linkLastUpdateDetail\" href=\"/edh/inschrift/HD000042\">\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     <span style=\"background-color: #FFFF00\">\n",
      "     </span>\n",
      "     HD000042  – open detailed view...\n",
      "    </a>\n",
      "    <span style=\"font-weight:normal\">\n",
      "     (newer version at:\n",
      "     <a href=\"http://www.edr-edr.it/edr_programmi/res_complex_comune.php?Bibliografia[]=HD000042\" target=\"_blank\">\n",
      "      EDR\n",
      "     </a>\n",
      "     )\n",
      "    </span>\n",
      "   </th>\n",
      "  </tr>\n",
      " </thead>\n",
      " <tbody>\n",
      "  <tr>\n",
      "   <td width=\"200px\">\n",
      "    <a href=\"/edh/geographie/19001\" style=\"background-image: none;color:#1F6B3B;padding:0;\">\n",
      "     <div id=\"map_canvas3\" style=\"width:200px;height:200px; border: 1px solid #ccc\">\n",
      "     </div>\n",
      "    </a>\n",
      "   </td>\n",
      "   <script type=\"text/javascript\">\n",
      "    $(document).ready(function(){\n",
      "        var pelagiosMap = L.tileLayer('https://dare.ht.lu.se/tiles/imperium/{z}/{x}/{y}.png',{attribution: 'Data: <a href=\"http://dare.ht.lu.se\">DARE</a>'});\n",
      "            var map = L.map('map_canvas3', {\n",
      "                center: [41.895466,12.482324],\n",
      "                zoom: 4,\n",
      "                zoomControl:false,\n",
      "                layers: [pelagiosMap]\n",
      "            });\n",
      "            map.dragging.disable();\n",
      "            map.touchZoom.disable();\n",
      "            map.doubleClickZoom.disable();\n",
      "            map.scrollWheelZoom.disable();\n",
      "            map.keyboard.disable();\n",
      "            var marker3 = L.marker([41.895466,12.482324]).addTo(map);\n",
      "    });\n",
      "   </script>\n",
      "   <td>\n",
      "    <table class=\"innerTable\">\n",
      "     <tr>\n",
      "      <td style=\"text-align:right;width:120px\">\n",
      "       <b>\n",
      "        Transcription:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       Maecia / M(arci) l(iberta) Haline / fecit sibe(!) / [s]uisque / [O]vioque / [So?]dali / [in fr(onte) p(edes)] XIIII / [in ag(ro) p(edes) ---]\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        Find spot:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       <a href=\"/edh/geographie/19001\" style=\"background-image: url(/images/pfeil_transparent.png);background-position: left center;color: #1F6B3B;padding-left: 16px;background-repeat: no-repeat;\">\n",
      "        Roma (Roma)\n",
      "       </a>\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        Italic region:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       <a href=\"/edh/geographie/900060\" style=\"background-image: url(/images/pfeil_transparent.png);background-position: left center;color: #1F6B3B;padding-left: 16px;background-repeat: no-repeat;\">\n",
      "        Roma\n",
      "       </a>\n",
      "       (Italy)\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        Chronological data:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       70 BC – 31 BC\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        Literature\n",
      "        <a class=\"help\" href=\"#\" onclick=\"showDialog('/tplInhalt/textSucheLiteratur_en.html','Literature','500px'); return false;\">\n",
      "         <img alt=\"Hilfe\" src=\"/images/hilfe_14.png\"/>\n",
      "        </a>\n",
      "        :\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       AE 1983, 0036.\n",
      "       <a class=\"tt\">\n",
      "        (B)\n",
      "        <span class=\"tooltip\">\n",
      "         abweichende Lesung, s. Kommentar\n",
      "        </span>\n",
      "       </a>\n",
      "       <br/>\n",
      "       G. Pisani Sartorio, in: G. Barbieri (Hrsg.), Il lapidario Zeri di Mentana (Roma 1982) 6-7, Nr. 5; tav. 4.\n",
      "       <a class=\"tt\">\n",
      "        (B)\n",
      "        <span class=\"tooltip\">\n",
      "         abweichende Lesung, s. Kommentar\n",
      "        </span>\n",
      "       </a>\n",
      "       - AE 1983.\n",
      "       <br/>\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        type of inscription:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       epitaph\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        type of monument:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       stele\n",
      "      </td>\n",
      "     </tr>\n",
      "     <tr>\n",
      "      <td align=\"right\">\n",
      "       <b>\n",
      "        material:\n",
      "       </b>\n",
      "      </td>\n",
      "      <td>\n",
      "       travertine: rocks - chemische Sedimente\n",
      "      </td>\n",
      "     </tr>\n",
      "    </table>\n",
      "   </td>\n",
      "   <td align=\"center\" style=\"min-width: 250px; max-width: 250px; width: 250px;\">\n",
      "    <a href=\"/edh/inschrift/HD000042/iiif\" style=\"background-image: none; color:#1F6B3B;\">\n",
      "     <img src=\"/fotos/F023476.JPG\" style=\"max-height:200px;max-width:200px;border:0px solid #000;\"/>\n",
      "    </a>\n",
      "   </td>\n",
      "  </tr>\n",
      " </tbody>\n",
      "</table>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#2. Find a single result\n",
    "\n",
    "#    - Create BeautifulSoup from result string\n",
    "htmlSoup = BeautifulSoup(htmlDocString,'html.parser')\n",
    "#print(htmlSoup.prettify())\n",
    "\n",
    "#    - Get a list of all results reffer 'table' elements of class 'treffertabelle'\n",
    "tableRefferList = htmlSoup.select('table.treffertabelle')\n",
    "#print(type(tableRefferList)) #<class 'list'>\n",
    "#print(len(tableRefferList))  #100\n",
    "\n",
    "#    - Load a single result into a variable\n",
    "#set curTable to 3rd table scrap info for a single result while developing\n",
    "#later this will just be a loop variable\n",
    "curTable = tableRefferList[2]\n",
    "print (curTable.prettify())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epitaph\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "# inspect website to find particular item code\n",
    "url = 'https://edh-www.adw.uni-heidelberg.de/edh/inschrift/HD000042&lang=en'\n",
    "\n",
    "badresponse = requests.get(url) #access the website with requests library\n",
    "#print (badresponse.text)\n",
    "#print(badresponse.status_code)\n",
    "#print (\"-------------\")\n",
    "\n",
    "# spoofing user agent\n",
    "user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'\n",
    "goodresponse = requests.get(url, headers={\"User-agent\":user_agent}) #access the website with requests library\n",
    "#print(goodresponse.status_code)\n",
    "\n",
    "\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "\n",
    "# inspect website to find particular item code\n",
    "url = 'https://edh-www.adw.uni-heidelberg.de/edh/inschrift/HD000042&lang=en'\n",
    "\n",
    "user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'\n",
    "response = requests.get(url, headers={\"User-agent\":user_agent}) #access the website with requests library\n",
    "\n",
    "#parse HTML and save to BeautifulSoup object\n",
    "bigsoup = BeautifulSoup(response.text, \"html.parser\")\n",
    "## the html parser give a wrong html (check for</body></html> in wrong position)\n",
    "#print (\"--------------------------------------start------------------------------------\")\n",
    "#print(bigsoup)\n",
    "#print (\"--------------------------------------end------------------------------------\")\n",
    "\n",
    "\n",
    "######################################################\n",
    "## the solution\n",
    "######################################################\n",
    "\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "\n",
    "# inspect website to find particular item code\n",
    "url = 'https://edh-www.adw.uni-heidelberg.de/edh/inschrift/HD000042&lang=en'\n",
    "\n",
    "user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'\n",
    "response = requests.get(url, headers={\"User-agent\":user_agent}) #access the website with requests library\n",
    "\n",
    "#parse HTML and save to BeautifulSoup object\n",
    "bigsoup = BeautifulSoup(response.text, \"html.parser\")\n",
    "\n",
    "# no matter in what table, looking for <td>language</td> --> orginal is <td><b>language</b></td>\n",
    "thetypeofinscription = bigsoup.find('td', text='type of inscription').find_next('td')\n",
    "print(thetypeofinscription.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://edh-www.adw.uni-heidelberg.de/edh/inschrift/HD000042&lang=en\n"
     ]
    }
   ],
   "source": [
    "#3. Find the link to the detailed page\n",
    "#    - Find link element to more detailed page class 'linkLastUpdateDetail'\n",
    "detailLinks = curTable.select('a.linkLastUpdateDetail')\n",
    "#print(detailLinks)\n",
    "\n",
    "#    - Load href property into a variable\n",
    "urlDetail = None #set to none for no detaillinks case\n",
    "for link in detailLinks:\n",
    "    urlDetail = urlBase + link.get('href') + paramLang\n",
    "    break\n",
    "print(urlDetail)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
